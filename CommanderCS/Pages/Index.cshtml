@page
@model GameCMS.Pages.Admin.IndexModel
@{
    ViewData["Title"] = "Game CMS Admin Panel";
    Layout = "_AdminLayout";
}

<div class="container-fluid">
    <!-- Login Section -->
    <div id="loginSection" class="row justify-content-center mt-5">
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title">Admin Login</h3>
                </div>
                <div class="card-body">
                    <form id="loginForm" method="post" asp-page-handler="Login">
                        <div class="form-group">
                            <label for="memberId">Member ID</label>
                            <input type="text" class="form-control" id="memberId" name="memberId" required>
                        </div>
                        <div class="form-group">
                            <label for="password">Password</label>
                            <input type="password" class="form-control" id="password" name="password" required>
                        </div>
                        <button type="submit" class="btn btn-primary btn-block">Login</button>
                    </form>
                    @if (Model.LoginMessage != null)
                    {
                        <div class="alert alert-danger mt-3">@Model.LoginMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Admin Panel (shown after login) -->
    <div id="adminPanel" class="row" style="display: none;">
        <div class="col-md-3">
            <div class="card">
                <div class="card-header bg-dark text-white">
                    <h5 class="card-title">Navigation</h5>
                </div>
                <div class="card-body p-0">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link active" href="#" data-target="itemsPanel">
                                <i class="fas fa-box"></i> Items Management
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#" data-target="profilesPanel">
                                <i class="fas fa-users"></i> Game Profiles
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-md-9">
            <!-- Items Management Panel -->
            <div id="itemsPanel" class="card panel-section">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title">Items Management</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success mb-3" data-toggle="modal" data-target="#addItemModal">
                        <i class="fas fa-plus"></i> Add New Item
                    </button>
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Rarity</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Items will be populated here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Game Profiles Panel -->
            <div id="profilesPanel" class="card panel-section" style="display: none;">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title">Game Profiles</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Profile ID</th>
                                    <th>Character Name</th>
                                    <th>Level</th>
                                    <th>Class</th>
                                    <th>Last Login</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Profiles will be populated here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Item Modal -->
<div class="modal fade" id="addItemModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Item</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addItemForm">
                    <div class="form-group">
                        <label for="itemName">Item Name</label>
                        <input type="text" class="form-control" id="itemName" required>
                    </div>
                    <div class="form-group">
                        <label for="itemType">Item Type</label>
                        <select class="form-control" id="itemType" required>
                            <option value="">Select Type</option>
                            <option value="Weapon">Weapon</option>
                            <option value="Armor">Armor</option>
                            <option value="Consumable">Consumable</option>
                            <option value="Material">Material</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="itemRarity">Rarity</label>
                        <select class="form-control" id="itemRarity" required>
                            <option value="Common">Common</option>
                            <option value="Uncommon">Uncommon</option>
                            <option value="Rare">Rare</option>
                            <option value="Epic">Epic</option>
                            <option value="Legendary">Legendary</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveItem">Save Item</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Handle login form submission
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const response = await fetch('?handler=Login', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    document.getElementById('loginSection').style.display = 'none';
                    document.getElementById('adminPanel').style.display = 'flex';
                    loadItems();
                    loadProfiles();
                } else {
                    alert('Login failed: ' + result.message);
                }
            } else {
                alert('Login error occurred');
            }
        });

        // Navigation handling
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.panel-section').forEach(section => {
                    section.style.display = 'none';
                });
                document.querySelectorAll('.nav-link').forEach(nav => {
                    nav.classList.remove('active');
                });
                this.classList.add('active');
                document.getElementById(this.dataset.target).style.display = 'block';
            });
        });

        // Load items from server
        async function loadItems() {
            const response = await fetch('?handler=Items');
            if (response.ok) {
                const items = await response.json();
                const tbody = document.querySelector('#itemsPanel tbody');
                tbody.innerHTML = '';
                
                items.forEach(item => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${item.id}</td>
                        <td>${item.name}</td>
                        <td>${item.type}</td>
                        <td><span class="badge badge-${getRarityClass(item.rarity)}">${item.rarity}</span></td>
                        <td>
                            <button class="btn btn-sm btn-info"><i class="fas fa-edit"></i></button>
                            <button class="btn btn-sm btn-danger"><i class="fas fa-trash"></i></button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            }
        }

        // Load profiles from server
        async function loadProfiles() {
            const response = await fetch('?handler=Profiles');
            if (response.ok) {
                const profiles = await response.json();
                const tbody = document.querySelector('#profilesPanel tbody');
                tbody.innerHTML = '';
                
                profiles.forEach(profile => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${profile.id}</td>
                        <td>${profile.characterName}</td>
                        <td>${profile.level}</td>
                        <td>${profile.class}</td>
                        <td>${new Date(profile.lastLogin).toLocaleDateString()}</td>
                    `;
                    tbody.appendChild(row);
                });
            }
        }

        // Helper function for rarity badge classes
        function getRarityClass(rarity) {
            const classes = {
                'Common': 'secondary',
                'Uncommon': 'success',
                'Rare': 'primary',
                'Epic': 'info',
                'Legendary': 'warning'
            };
            return classes[rarity] || 'secondary';
        }

        // Save new item
        document.getElementById('saveItem').addEventListener('click', async function() {
            const item = {
                name: document.getElementById('itemName').value,
                type: document.getElementById('itemType').value,
                rarity: document.getElementById('itemRarity').value
            };
            
            const response = await fetch('?handler=AddItem', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(item)
            });
            
            if (response.ok) {
                $('#addItemModal').modal('hide');
                document.getElementById('addItemForm').reset();
                loadItems();
            } else {
                alert('Error adding item');
            }
        });
    </script>
}